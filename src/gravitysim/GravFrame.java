/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gravitysim;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import java.math.*;
import java.text.*;
import java.util.ArrayList;

/**
 *
 * @author Austin
 */
public class GravFrame extends javax.swing.JFrame {

    // array containing celestial objects
    ArrayList<Body> bodies;
    // variable gravitational constant, haha
    private double G = 6.675E-11;
    // scale of pixel to meters ratio
    private double scale = 1E6;
    // offset from the center of the universe
    private double panX = 0;
    private double panY = 0;
    // current slider values
    private double currMass;
    private double currRadius;
    private double currVX;
    private double currVY;
    private int currSpeed;
    private boolean advObject;
    private boolean solSystem;
    private boolean earthMoon;
    
    // scientific notation formatter
    NumberFormat formatter = new DecimalFormat("0.#E0");

    /**
     * Creates new form GravFrame
     */
    public GravFrame() {
        initComponents();
        
        //paintPanel = new JPanel();
        this.setFocusTraversalKeysEnabled(true);
        bodies = new ArrayList();
        numberLabel.setText("No. of Obj = " + bodies.size());
        scaleLabel.setText("Scale: 1 px = " + scale);
        
        massSlider.setValue(248);
        getCurrentMass();
        massLabel.setText("Mass (kg) = " + formatter.format(currMass));
        
        radiusSlider.setValue(68);
        getCurrentRadius();
        radiusLabel.setText("Radius (m) = " + formatter.format(currRadius));
        
        vxSlider.setValue(0);
        getCurrentVX();
        vxLabel.setText("VX (m/s) = " + formatter.format(currVX));
        
        vySlider.setValue(0);
        getCurrentVY();
        vyLabel.setText("VY (m/s) = " + formatter.format(currVY));

        speedSlider.setValue(1000);
        getCurrentSpeed();
        speedLabel.setText("Speed = " + currSpeed + "x");
        
        advObject = false;
        solSystem = false;
        
        // activate timer event
        Timer timer = new Timer(10, new TimerListener());
        timer.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paintPanel = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        editPanel = new javax.swing.JPanel();
        massLabel = new javax.swing.JLabel();
        vxLabel = new javax.swing.JLabel();
        vyLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        gField = new javax.swing.JTextField();
        radiusLabel = new javax.swing.JLabel();
        pauseButton = new javax.swing.JRadioButton();
        scaleLabel = new javax.swing.JLabel();
        numberLabel = new javax.swing.JLabel();
        massSlider = new javax.swing.JSlider();
        radiusSlider = new javax.swing.JSlider();
        vxSlider = new javax.swing.JSlider();
        vySlider = new javax.swing.JSlider();
        speedLabel = new javax.swing.JLabel();
        speedSlider = new javax.swing.JSlider();
        topMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveMenuItem = new javax.swing.JMenuItem();
        loadMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        commonObjectMenu = new javax.swing.JMenu();
        sunMenuItem = new javax.swing.JMenuItem();
        mercuryMenuItem = new javax.swing.JMenuItem();
        venusMenuItem = new javax.swing.JMenuItem();
        earthMenuItem = new javax.swing.JMenuItem();
        moonMenuItem = new javax.swing.JMenuItem();
        marsMenuItem = new javax.swing.JMenuItem();
        jupiterMenuItem = new javax.swing.JMenuItem();
        saturnMenuItem = new javax.swing.JMenuItem();
        uranusMenuItem = new javax.swing.JMenuItem();
        neptuneMenuItem = new javax.swing.JMenuItem();
        plutoMenuItem = new javax.swing.JMenuItem();
        advanceObjectMenu = new javax.swing.JMenu();
        solSystemMenuItem = new javax.swing.JMenuItem();
        earthMoonMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        paintPanel = new myPanel();
        paintPanel.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                paintPanelMouseWheelMoved(evt);
            }
        });
        paintPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paintPanelMouseClicked(evt);
            }
        });
        paintPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                paintPanelMouseDragged(evt);
            }
        });
        paintPanel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                paintPanelKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout paintPanelLayout = new javax.swing.GroupLayout(paintPanel);
        paintPanel.setLayout(paintPanelLayout);
        paintPanelLayout.setHorizontalGroup(
            paintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 391, Short.MAX_VALUE)
        );
        paintPanelLayout.setVerticalGroup(
            paintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        massLabel.setText("Mass(kg)");

        vxLabel.setText("Velocity X(m/s)");

        vyLabel.setText("Velocity Y(m/s)");

        jLabel4.setText("G const");

        gField.setText("6.675E-11");

        radiusLabel.setText("Radius(m)");

        pauseButton.setText("Pause");

        scaleLabel.setText("Scale: 1 px =");

        numberLabel.setText("No. of Obj =");

        massSlider.setMaximum(400);
        massSlider.setMinimum(10);
        massSlider.setValue(60);
        massSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                massSliderStateChanged(evt);
            }
        });

        radiusSlider.setMaximum(120);
        radiusSlider.setMinimum(10);
        radiusSlider.setToolTipText("");
        radiusSlider.setValue(60);
        radiusSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radiusSliderStateChanged(evt);
            }
        });

        vxSlider.setMaximum(85);
        vxSlider.setMinimum(-85);
        vxSlider.setToolTipText("");
        vxSlider.setValue(0);
        vxSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                vxSliderStateChanged(evt);
            }
        });

        vySlider.setMaximum(85);
        vySlider.setMinimum(-85);
        vySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                vySliderStateChanged(evt);
            }
        });

        speedLabel.setText("Speed");

        speedSlider.setMaximum(1000000);
        speedSlider.setMinimum(1);
        speedSlider.setValue(1000);
        speedSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                speedSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout editPanelLayout = new javax.swing.GroupLayout(editPanel);
        editPanel.setLayout(editPanelLayout);
        editPanelLayout.setHorizontalGroup(
            editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editPanelLayout.createSequentialGroup()
                .addComponent(massLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(editPanelLayout.createSequentialGroup()
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gField)
                    .addComponent(scaleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(editPanelLayout.createSequentialGroup()
                        .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(vxLabel)
                            .addComponent(vyLabel)
                            .addComponent(radiusLabel)
                            .addComponent(jLabel4)
                            .addComponent(pauseButton)
                            .addComponent(numberLabel))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(speedLabel)
                                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(massSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(radiusSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(vxSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(vySlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(speedSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        editPanelLayout.setVerticalGroup(
            editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(massLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(massSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radiusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radiusSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vxLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vxSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vyLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(speedLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(speedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pauseButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(numberLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scaleLabel)
                .addContainerGap())
        );

        fileMenu.setText("File");

        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        loadMenuItem.setText("Load");
        fileMenu.add(loadMenuItem);

        topMenuBar.add(fileMenu);

        editMenu.setText("Edit");
        topMenuBar.add(editMenu);

        commonObjectMenu.setText("Cmn. Objects");

        sunMenuItem.setText("Sun");
        sunMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sunMenuItemActionPerformed(evt);
            }
        });
        commonObjectMenu.add(sunMenuItem);

        mercuryMenuItem.setText("Mercury");
        mercuryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mercuryMenuItemActionPerformed(evt);
            }
        });
        commonObjectMenu.add(mercuryMenuItem);

        venusMenuItem.setText("Venus");
        venusMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                venusMenuItemActionPerformed(evt);
            }
        });
        commonObjectMenu.add(venusMenuItem);

        earthMenuItem.setText("Earth");
        earthMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                earthMenuItemActionPerformed(evt);
            }
        });
        commonObjectMenu.add(earthMenuItem);

        moonMenuItem.setText("Moon");
        moonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moonMenuItemActionPerformed(evt);
            }
        });
        commonObjectMenu.add(moonMenuItem);

        marsMenuItem.setText("Mars");
        marsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                marsMenuItemActionPerformed(evt);
            }
        });
        commonObjectMenu.add(marsMenuItem);

        jupiterMenuItem.setText("Jupiter");
        jupiterMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jupiterMenuItemActionPerformed(evt);
            }
        });
        commonObjectMenu.add(jupiterMenuItem);

        saturnMenuItem.setText("Saturn");
        saturnMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saturnMenuItemActionPerformed(evt);
            }
        });
        commonObjectMenu.add(saturnMenuItem);

        uranusMenuItem.setText("Uranus");
        uranusMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uranusMenuItemActionPerformed(evt);
            }
        });
        commonObjectMenu.add(uranusMenuItem);

        neptuneMenuItem.setText("Neptune");
        neptuneMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                neptuneMenuItemActionPerformed(evt);
            }
        });
        commonObjectMenu.add(neptuneMenuItem);

        plutoMenuItem.setText("Pluto");
        plutoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plutoMenuItemActionPerformed(evt);
            }
        });
        commonObjectMenu.add(plutoMenuItem);

        topMenuBar.add(commonObjectMenu);

        advanceObjectMenu.setText("Adv. Objects");

        solSystemMenuItem.setText("Sol System");
        solSystemMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solSystemMenuItemActionPerformed(evt);
            }
        });
        advanceObjectMenu.add(solSystemMenuItem);

        earthMoonMenuItem.setText("Earth & Moon");
        earthMoonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                earthMoonMenuItemActionPerformed(evt);
            }
        });
        advanceObjectMenu.add(earthMoonMenuItem);

        topMenuBar.add(advanceObjectMenu);

        setJMenuBar(topMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(paintPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(paintPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void paintPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paintPanelMouseClicked
        // set focus for key commands
        paintPanel.grabFocus();

        // save the click location to avoid repeat function calls
        double mx = evt.getX() * scale + panX;
        double my = evt.getY() * scale + panY;

        // get data from text fields
        //double iM = Double.parseDouble(massField.getText());
        double iM = currMass;
        double iVX = currVX;
        double iVY = currVY;
        double iR = currRadius;
        
        if(advObject){
            addAdvanceObject(mx,my,iVX,iVY);
        } else {
            addBody(mx,my,iM,iR,iVX,iVY);
        }
        
        
    }//GEN-LAST:event_paintPanelMouseClicked

    private void paintPanelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paintPanelKeyPressed

        //fuck
        //System.out.println("hell");
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_SPACE) {
            System.out.println("no space for you!");
        } else if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_LEFT || evt.getKeyCode() == java.awt.event.KeyEvent.VK_A) {
            panX = panX - scale * 4;
        } else if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_RIGHT || evt.getKeyCode() == java.awt.event.KeyEvent.VK_D) {
            panX = panX + scale * 4;
        } else if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_DOWN || evt.getKeyCode() == java.awt.event.KeyEvent.VK_S) {
            panY = panY + scale * 4;
        } else if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_UP || evt.getKeyCode() == java.awt.event.KeyEvent.VK_W) {
            panY = panY - scale * 4;
        }
    }//GEN-LAST:event_paintPanelKeyPressed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_formKeyPressed

    private void paintPanelMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_paintPanelMouseWheelMoved
        // TODO add your handling code here:
        // scientific notation formatter
        
        // scale up or down by 2x using the mousewheel
        if (evt.getWheelRotation() == 1) {
            scale = scale * 2;
            scaleLabel.setText("Scale: 1 px = " + formatter.format(scale));
        } else if (evt.getWheelRotation() == -1) {
            scale = scale / 2;
            scaleLabel.setText("Scale: 1 px = " + formatter.format(scale));
        }
    }//GEN-LAST:event_paintPanelMouseWheelMoved

    private void paintPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paintPanelMouseDragged
        // TODO add your handling code here:
        // duplicate of mouse click code, should refactor to a new function
        paintPanel.grabFocus();

        //grab mouse coordinates, convert to space coordinates
        double mx = evt.getX() * scale + panX;
        double my = evt.getY() * scale + panY;

        //double iM = Double.parseDouble(massField.getText());
        double iM = currMass;
        double iVX = currVX;
        double iVY = currVY;
        double iR = currRadius;

        addBody(mx,my,iM,iR,iVX,iVY);
    }//GEN-LAST:event_paintPanelMouseDragged

    private void massSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_massSliderStateChanged
        // TODO add your handling code here:
        getCurrentMass();
        massLabel.setText("Mass (kg) = " + formatter.format(currMass));
    }//GEN-LAST:event_massSliderStateChanged

    private void radiusSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_radiusSliderStateChanged
        // TODO add your handling code here:
        getCurrentRadius();
        radiusLabel.setText("Radius (m) = " + formatter.format(currRadius));
    }//GEN-LAST:event_radiusSliderStateChanged

    private void vxSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_vxSliderStateChanged
        // TODO add your handling code here:
        getCurrentVX();
        vxLabel.setText("VX (m/s) = " + formatter.format(currVX));
    }//GEN-LAST:event_vxSliderStateChanged

    private void vySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_vySliderStateChanged
        // TODO add your handling code here:
        getCurrentVY();
        vyLabel.setText("VY (m/s) = " + formatter.format(currVY));
    }//GEN-LAST:event_vySliderStateChanged

    private void sunMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sunMenuItemActionPerformed
        // TODO add your handling code here:
        massSlider.setValue(303);
        radiusSlider.setValue(88);
        setSlidersEnabled(true);
        resetBooleans();
    }//GEN-LAST:event_sunMenuItemActionPerformed

    private void mercuryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mercuryMenuItemActionPerformed
        // TODO add your handling code here:
        massSlider.setValue(235);
        radiusSlider.setValue(64);
        setSlidersEnabled(true);
        resetBooleans();
    }//GEN-LAST:event_mercuryMenuItemActionPerformed

    private void venusMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_venusMenuItemActionPerformed
        // TODO add your handling code here:
        massSlider.setValue(247);
        radiusSlider.setValue(68);
        setSlidersEnabled(true);
        resetBooleans();
    }//GEN-LAST:event_venusMenuItemActionPerformed

    private void earthMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_earthMenuItemActionPerformed
        // TODO add your handling code here:
        massSlider.setValue(248);
        radiusSlider.setValue(68);
        setSlidersEnabled(true);
        resetBooleans();
    }//GEN-LAST:event_earthMenuItemActionPerformed

    private void moonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moonMenuItemActionPerformed
        // TODO add your handling code here:
        massSlider.setValue(229);
        radiusSlider.setValue(62);
        setSlidersEnabled(true);
        resetBooleans();
    }//GEN-LAST:event_moonMenuItemActionPerformed

    private void marsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_marsMenuItemActionPerformed
        // TODO add your handling code here:
        massSlider.setValue(238);
        radiusSlider.setValue(65);
        setSlidersEnabled(true);
        resetBooleans();
    }//GEN-LAST:event_marsMenuItemActionPerformed

    private void jupiterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jupiterMenuItemActionPerformed
        // TODO add your handling code here:
        massSlider.setValue(273);
        radiusSlider.setValue(78);
        setSlidersEnabled(true);
        resetBooleans();
    }//GEN-LAST:event_jupiterMenuItemActionPerformed

    private void saturnMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saturnMenuItemActionPerformed
        // TODO add your handling code here:
        massSlider.setValue(267);
        radiusSlider.setValue(77);
        setSlidersEnabled(true);
        resetBooleans();
    }//GEN-LAST:event_saturnMenuItemActionPerformed

    private void uranusMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uranusMenuItemActionPerformed
        // TODO add your handling code here:
        massSlider.setValue(259);
        radiusSlider.setValue(74);
        setSlidersEnabled(true);
        resetBooleans();
    }//GEN-LAST:event_uranusMenuItemActionPerformed

    private void neptuneMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_neptuneMenuItemActionPerformed
        // TODO add your handling code here:
        massSlider.setValue(260);
        radiusSlider.setValue(74);
        setSlidersEnabled(true);
        resetBooleans();
    }//GEN-LAST:event_neptuneMenuItemActionPerformed

    private void plutoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plutoMenuItemActionPerformed
        // TODO add your handling code here:
        massSlider.setValue(222);
        radiusSlider.setValue(61);
        setSlidersEnabled(true);
        resetBooleans();
    }//GEN-LAST:event_plutoMenuItemActionPerformed

    private void speedSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_speedSliderStateChanged
        // TODO add your handling code here:
        getCurrentSpeed();
        speedLabel.setText("Speed = " + currSpeed + "x");
    }//GEN-LAST:event_speedSliderStateChanged

    private void solSystemMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solSystemMenuItemActionPerformed
        // TODO add your handling code here:
        // Lets build our Solar System
        setSlidersEnabled(false);
        resetBooleans();
        advObject = true;
        solSystem = true;
    }//GEN-LAST:event_solSystemMenuItemActionPerformed

    private void earthMoonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_earthMoonMenuItemActionPerformed
        // TODO add your handling code here:
        setSlidersEnabled(false);
        resetBooleans();
        advObject = true;
        earthMoon = true;
    }//GEN-LAST:event_earthMoonMenuItemActionPerformed

    // calculate the appropriate planet size
    public int findSize(Body bod) {
        int size = (int) ((bod.getR() * 2) * 1E-6);
        return size;
    }

    // calculate the radius of the planet
    public double findR(Body bod) {
        double v = bod.getMass() / bod.getDensity();
        double radius = (v * 3) / (4 * Math.PI);
        radius = Math.cbrt(radius);
        return radius;
    }

    // calculate the density of the planet
    public double findDens(Body bod) {  
        double d = bod.getMass() / findVol(bod);
        return d;
    }

    // calculate the volume of the planet
    public double findVol(Body bod) {
        double radius = bod.getR();
        double vol = 1.3333333 * Math.PI * (radius * radius * radius);
        return vol;
    }
    
    // updates the number of bodies displayed by the label
    public void updateNumberLabel(){
        numberLabel.setText("No. of Obj = " + bodies.size());
    }
    
    // find current radius
    public void getCurrentRadius(){
        currRadius = Math.pow(10, radiusSlider.getValue()/10.0);
    }
    
    //find current mass
    public void getCurrentMass(){
        currMass = Math.pow(10, massSlider.getValue()/10.0);
    }
    
    //find current x velocity from slider
    public void getCurrentVX(){
        if(vxSlider.getValue() >= 0){
            currVX = Math.pow(10, vxSlider.getValue()/10.0);
        } else {
            currVX = -1 * Math.pow(10, vxSlider.getValue()/-10.0);
        }
        
    }
    
    //find current y velocity from slider
    public void getCurrentVY(){
        if(vySlider.getValue() >= 0){
            currVY = Math.pow(10, vySlider.getValue()/10.0);
        } else {
            currVY = -1 * Math.pow(10, vySlider.getValue()/-10.0);
        }
    }
    
    //find current speed from slider
    public void getCurrentSpeed(){
        currSpeed = speedSlider.getValue();
    }
    
    // add a new body to the model
    public void addBody(double mx, double my, double iM, double iR, double iVX, double iVY){

        double iDens = 5556;

        Body newBod = new Body(mx, my, iDens, 6, iR, iM, iVX, iVY);
        iDens = findDens(newBod);
        newBod.setDensity(iDens);
        int newSize = findSize(newBod);
        newBod.setSize(newSize);

        bodies.add(newBod);
    }
    
    // create an advance object
    public void addAdvanceObject(double mx, double my, double iVX, double iVY){
        if(solSystem){
            addSolSystem(mx,my,iVX,iVY);
        }
        if(earthMoon){
            addEarthMoon(mx,my,iVX,iVY);
        }
    }
    
    //create sol system
    public void addSolSystem(double mx, double my, double iVX, double iVY){
        //Sun
        addBody(mx,my,2E30,7E8,iVX,iVY);
        //Mercury
        addBody(mx+ 5.79E10,my,3.2E23,2.4E6,iVX,iVY+47.3E3);
        //Venus
        addBody(mx+1.08E11,my,4.8E24,6E6,iVX,iVY+35E3);
        //Earth
        addBody(mx+1.48E11,my,6E24,6.3E6,iVX,iVY+29.8E3);
        //Mars
        addBody(mx+2.27E11,my,6.4E23,3.4E6,iVX,iVY+24.1E3);
        //Jupiter
        addBody(mx+7.78E11,my,1.9E27,7E7,iVX,iVY+13.1E3);
        //Saturn
        addBody(mx+1.43E12,my,5.7E26,5.8E7,iVX,iVY+9.6E3);
        //Uranus
        addBody(mx+2.873E12,my,8.7E25,2.5E7,iVX,iVY+6.8E3);
        //Nepture
        addBody(mx+4.495E12,my,1E26,2.5E7,iVX,iVY+5.4E3);
        //Pluto
        addBody(mx+5.906E12,my,1.3E22,1.2E6,iVX,iVY+4.74E3);
    }
    
    // create Earth and Moon system
    public void addEarthMoon(double mx, double my, double iVX, double iVY){
        //Earth
        addBody(mx,my,6E24,6.3E6,iVX,iVY);
        //Moon
        addBody(mx+384.4E6,my,7.3E22,1.7E6,iVX,iVY+1.022E3);
    }
    
    // toggle mass and radius sliders for advanced objects
    public void setSlidersEnabled(boolean value){
        massSlider.setEnabled(value);
        radiusSlider.setEnabled(value);
    }
    
    // reset boolean values
    public void resetBooleans(){
        advObject = false;
        solSystem = false;
        earthMoon = false;
    }

    // Timer listener class used to update the frame
    public class TimerListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            //System.out.println("damn");

            //update the position of all our bodies
            if (pauseButton.isSelected()) {
                //wait
            } else {
                //get gravity const
                double grav = 6.657E-11;
                try{
                    grav = Double.parseDouble(gField.getText());
                } catch (Exception ex){
                    //failed to get gravity from text box. Leave as default
                }

                //calculate change in position, velocity, and accel
                for (int i = 0; i < bodies.size(); i++) {
                    Body bod = bodies.get(i);
                    for (int j = 0; j < bodies.size(); j++) {
                        Body bod2 = bodies.get(j);
                        if (bod.equals(bod2)) {
                            //do nothing
                        } else {
                            double xd = bod2.getX() - bod.getX();
                            double yd = bod2.getY() - bod.getY();
                            double d = Math.sqrt((xd * xd) + (yd * yd));

                            if (d < bod.getR()+(bod2.getR()/2)) {
                                //COLLISION!
                                //update velocity and mass to conserve momentum
                                double m1 = bod.getMass();
                                double m2 = bod2.getMass();
                                double tm = m1 + m2;
                                double d1 = bod.getDensity();
                                double d2 = bod2.getDensity();
                                double pX = bod.getMass() * bod.getVX() + bod2.getMass() * bod2.getVX();
                                double pY = bod.getMass() * bod.getVY() + bod2.getMass() * bod2.getVY();
                                bod.setMass(bod.getMass() + bod2.getMass());
                                bod.setVX(pX / bod.getMass());
                                bod.setVY(pY / bod.getMass());

                                //update density to avg of both objects
                                d1 = (m1 / tm) * d1;
                                d2 = (m2 / tm) * d2;
                                double newDens = d1 + d2;
                                bod.setDensity(newDens);

                                //update size
                                double newR = findR(bod);
                                bod.setR(newR);
                                int newSize = findSize(bod);
                                bod.setSize(newSize);

                                bodies.remove(bod2);
                            } else {
                                // calculate acceleration on both bodies
                                // G * M1 * M2
                                double force = grav * bod.getMass() * bod2.getMass();
                                // over distance squared
                                force = force / (d * d);
                                // a = F/m from F = ma
                                double acc = force / bod.getMass();
                                double accx = (xd / d) * acc;
                                double accy = (yd / d) * acc;

                                // change object velocities, set speed of light as max
                                if(bod.getVX() < 3E8 && bod.getVX() > -3E8){
                                    bod.setVX(bod.getVX() + ((accx/100.0)*currSpeed));
                                } else if (bod.getVX()>= 3E8){
                                    bod.setVX(3E8);
                                } else {
                                    bod.setVX(-3E8);
                                }
                                
                                if(bod.getVY() < 3E8 && bod.getVY() > -3E8){
                                    bod.setVY(bod.getVY() + ((accy/100.0)*currSpeed));
                                } else if(bod.getVY() >= 3E8){
                                    bod.setVY(3E8);
                                } else {
                                    bod.setVY(-3E8);
                                }
                                
                            }

                        }
                    }
                }

                for (Body bod : bodies) {
                    bod.setX(bod.getX() + (bod.getVX()/100)*currSpeed);
                    bod.setY(bod.getY() + (bod.getVY()/100)*currSpeed);
                }

            }
            
//            //paint the bodies on the frame
//            BufferedImage steve = new BufferedImage(paintPanel.getWidth(), paintPanel.getHeight(), BufferedImage.TYPE_INT_RGB);
//            Graphics2D gg = steve.createGraphics();
//            Graphics g = paintPanel.getGraphics();
//            //paintPanel.repaint();
//            //Graphics2D gg = (Graphics2D) g;
//            gg.setColor(Color.BLACK);
//            gg.fillRect(0, 0, paintPanel.getWidth(), paintPanel.getHeight());
//            for (Body bod : bodies) {
//
//                gg.setColor(Color.WHITE);
//                int showX = (int) ((bod.getX() - bod.getR() - panX) / scale);
//                int showY = (int) ((bod.getY() - bod.getR() - panY) / scale);
//                int size = (int) ((bod.getR() * 2) / scale) + 1;
//                gg.drawOval(showX, showY, size, size);
//                gg.fillOval(showX, showY, size, size);
//            }
//            g.drawImage(steve, 0, 0, null);
            paintPanel.repaint();
            
            updateNumberLabel();
        }

    }

    // JPanel sub-class used to override the paintComponent method
    // used to avoid graphics bugs from painting directly to JPanel object
    private class myPanel extends JPanel{
        @Override public void paintComponent(Graphics g){
            super.paintComponent(g);
            
            //paint the bodies on the frame
            BufferedImage steve = new BufferedImage(paintPanel.getWidth(), paintPanel.getHeight(), BufferedImage.TYPE_INT_RGB);
            Graphics2D gg = steve.createGraphics();
            //Graphics g = paintPanel.getGraphics();
            //paintPanel.repaint();
            //Graphics2D gg = (Graphics2D) g;
            gg.setColor(Color.BLACK);
            gg.fillRect(0, 0, paintPanel.getWidth(), paintPanel.getHeight());
            for (Body bod : bodies) {

                gg.setColor(Color.WHITE);
                int showX = (int) ((bod.getX() - bod.getR() - panX) / scale);
                int showY = (int) ((bod.getY() - bod.getR() - panY) / scale);
                int size = (int) ((bod.getR() * 2) / scale) + 1;
                gg.drawOval(showX, showY, size, size);
                gg.fillOval(showX, showY, size, size);
            }
            g.drawImage(steve, 0, 0, null);
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GravFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GravFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GravFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GravFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GravFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu advanceObjectMenu;
    private javax.swing.JMenu commonObjectMenu;
    private javax.swing.JMenuItem earthMenuItem;
    private javax.swing.JMenuItem earthMoonMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JPanel editPanel;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JTextField gField;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenuItem jupiterMenuItem;
    private javax.swing.JMenuItem loadMenuItem;
    private javax.swing.JMenuItem marsMenuItem;
    private javax.swing.JLabel massLabel;
    private javax.swing.JSlider massSlider;
    private javax.swing.JMenuItem mercuryMenuItem;
    private javax.swing.JMenuItem moonMenuItem;
    private javax.swing.JMenuItem neptuneMenuItem;
    private javax.swing.JLabel numberLabel;
    private javax.swing.JPanel paintPanel;
    private javax.swing.JRadioButton pauseButton;
    private javax.swing.JMenuItem plutoMenuItem;
    private javax.swing.JLabel radiusLabel;
    private javax.swing.JSlider radiusSlider;
    private javax.swing.JMenuItem saturnMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JLabel scaleLabel;
    private javax.swing.JMenuItem solSystemMenuItem;
    private javax.swing.JLabel speedLabel;
    private javax.swing.JSlider speedSlider;
    private javax.swing.JMenuItem sunMenuItem;
    private javax.swing.JMenuBar topMenuBar;
    private javax.swing.JMenuItem uranusMenuItem;
    private javax.swing.JMenuItem venusMenuItem;
    private javax.swing.JLabel vxLabel;
    private javax.swing.JSlider vxSlider;
    private javax.swing.JLabel vyLabel;
    private javax.swing.JSlider vySlider;
    // End of variables declaration//GEN-END:variables
}
